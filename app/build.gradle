apply plugin: 'com.android.application'
println 'This is executed during the configuration phase project info = '+this.getProject().getClass().getSuperclass()
println 'This is executed during the configuration phase gradle info =  '+this.getProject().getGradle().getClass().getSuperclass()

//get Gradle Object
this.getProject().getGradle().addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        println "Project buildStarted"
    }

    @Override
    void settingsEvaluated(Settings settings) {
        println "Project settingsEvaluated"
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println "Project projectsLoaded"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "Project projectsEvaluated"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Project buildFinished"
    }
})
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.bruce.jing.hello.demo"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "LOG_DEBUG", "false")//输出debug级别以上的log
        renderscriptTargetApi 24
        renderscriptSupportModeEnabled true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

boolean isFileExist(){
    File file = new File(rootProject.getRootDir().path+"/test.txt")
    logger.log(LogLevel.ERROR, "filepath = "+file.getPath()+" isFileExist = "+file.exists())

//    File file2 = new File(rootProject.buildFile.path)
//    logger.log(LogLevel.ERROR, "filepath2 = "+file2.getPath()+" isFileExist = "+file2.exists())
    return file.exists()
}

dependencies {
    if (isFileExist()) {
        logger.log(LogLevel.ERROR, "dependencies fileexist!!!!")
    } else {
        logger.log(LogLevel.ERROR, "dependencies file not exist???")
    }
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation 'androidx.multidex:multidex:2.0.0'

    testImplementation 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation ('com.wonderkiln:blurkit:1.0.0'){
        exclude module: 'support-compat'
        exclude module:'support-media-compat'
    }
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.3.0-alpha03'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha03'

}

//task copyApk(type: Copy){
//    mkdir("gradle_test/copy/apk")
//    from("build/outputs/apk/debug")
//    into("gradle_test/copy/apk")
//    include("app-debug.apk")
//    println("jing copyApk")
//}

/**
 * DSL 已经初始化了Copy类的对象，直接使用即可
 */
getGradle().buildFinished {
    println(" after build finish execute")
    copy {
        mkdir("gradle_test/copy/apk/test")
//        from("build/outputs/apk")
//        into("gradle_test/copy/apk")
        from("build/outputs/apk/debug")
        into("gradle_test/copy/apk")
        include("app-debug.apk","app-release-unsigned.apk")
        println("jing copyApk")
    }
}
